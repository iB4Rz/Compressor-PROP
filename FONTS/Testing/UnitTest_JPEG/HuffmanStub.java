package UnitTest_JPEG;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import Domain.Huffman;

public class HuffmanStub extends Huffman {


    int count;

    static final byte[] Compressed1 = {
        0x27, 0x02, 0x05, 0x21, 0x27, 0x7F, 0x02, 0x20, 0x24, 0x02,
        0x40, 0x62, 0x08, 0x45, 0x10, 0x3C, 0x1D, 0x00, 0x06, 0x38,
        0x5F, 0x3E, 0x15, 0x66, 0x14, 0x17, 0x6F, 0x42, 0x6B, 0x58,
        0x57, 0x36, 0x4C, 0x3C, 0x10, 0x47, 0x4D, 0x26, 0x6B, 0x2D,
        0x1A, 0x73, 0x1B, 0x2D, 0x19, 0x75, 0x29, 0x4C, 0x6A, 0x5D,
        0x26, 0x35, 0x7A, 0x55, 0x3E, (byte)0xAA };
    
    static final byte[] Compressed2 = {
        0x3D, 0x04, 0x06, 0x40, 0x48, 0x13, 0x7F, 0x40, 0x30, 0x01,
        0x66, 0x44, 0x2C, 0x2F, 0x14, 0x5F, 0x36, 0x7E, 0x6D, 0x5F,
        0x5B, 0x36, 0x7E, 0x6D, 0x5B, 0x3F, 0x6D, 0x5F, 0x7D, (byte)0xF5 };


    static final byte[] Decompressed1 = {
        (byte)0xFF, 0x08, 0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0A,
        0x00, 0x14, 0x00, 0x0A, 0x00, 0x05, 0x00, 0x0E,
        0x00, 0x0E, 0x00, 0x05, 0x00, 0x03, 0x00, 0x07,
        0x00, 0x0A, 0x00, 0x07, 0x00, 0x03, 0x00, 0x02,
        0x00, 0x04, 0x00, 0x05, 0x00, 0x05, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03,
        0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03,
        0x00, 0x03, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02,
        0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x01 };

    static final byte[] Decompressed2 = {
        (byte)0xFF, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01,
        0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x01 };


    /**
     * Setter
     * @param count new value for count
     */
    public void setCount(int count) {
        this.count = count;
    }

    /**
     * Getter
     * @return the counter count
     */
    public int getCount(){
        return count;
    }

    @Override
    public void setMaxSizeHint(int maxSizeInBytes) {
        System.out.println("Calls setMaxSizeHint from Huffman STUB");
        // maxSizeInBytes equals 128 always.
    }

    @Override
    public void compress(InputStream is, OutputStream os) throws IOException {
        System.out.println("Calls compress from Huffman STUB");
        if (count == 0) 
            for (int i = 0; i < Compressed1.length; ++i) 
                os.write(Compressed1[i]);

        if(count == 1 || count == 2) 
            for (int i = 0; i < Compressed2.length; ++i) 
                os.write(Compressed2[i]);
            
        ++count;
    }

    @Override
    public void decompress(InputStream is, OutputStream os) throws IOException {
        System.out.println("Calls decompress from Huffman STUB");
        if (count == 0) 
            for (int i = 0; i < Decompressed1.length; ++i) 
                os.write(Decompressed1[i]);
            
        if (count == 1 || count == 2) 
            for (int i = 0; i < Decompressed2.length; ++i) 
                os.write(Decompressed2[i]);

        ++count;
    }
}

